React:
Components are the core of React. Everything in React is a component.
There are two ways to create a React component.
    1.Stateless Functional Component.
    To create a component with function,you simply write a Javascript function that
    return either JSX or null. 
    One important thing to note is that React requires your function name to begin with a "capital letter"

The Example of Stateles Function Componet

    const DemoComponent = function() {
        return (
            <div className ="customClass" />
        );
    };


    2.Class syntex
    The other way to define a React component is with ES6 class syntex.

The Example ES6 Class

    class Kitten extends React.Component {
        constructor(props) {
            super(props);
        }

        render() {
            return (
                <h1>HI</h1>
            );
        }
    }

Use React to Render Nested Components

    There are two functional components defined in the code editor,
called TypesOfFruit and Fruits. Take the TypesOfFruit
component and compose it,or nest it,within the Fruits
component. Then take the Fruits component and nest it within
the TypesOfFruit component. The result should be a child
component,nestd within a parent component,which is nested within a parent
component of its own.    

const TypesOfFruit = () => {
  return (
    <div>
      <h2>Fruits:</h2>
      <ul>
        <li>Apples</li>
        <li>Blueberries</li>
        <li>Strawberries</li>
        <li>Bananas</li>
      </ul>
    </div>
  );
};

const Fruits = () => {
  return (
    <div>
      { /* Change code below this line  nested 
      TypesOfFruit component within Fruits component*/ }

        <TypesOfFruit />

      { /* Change code above this line */ }
    </div>
  );
};

class TypesOfFood extends React.Component {
  constructor(props) {
    super(props);
  }

  render() {
    return (
      <div>
        <h1>Types of Food:</h1>
        { /* Change code below this line */ }
        <Fruits />
        { /* Change code above this line */ }
      </div>
    );
  }
};
//render a class component to DOM

const target = document.getElementById('challenge-node')

ReactDOM.render(<TypesOfFood/>,target);

Pass Props to a Stateless Functional Component

In React,you can pass props,or properties,to child components.Say you have an App
component which renders a child component called Welcome which is
 a stateless functional component. You can pass Welcome a user property by write


                    <App>
                        <Welcome user='Welcome' />
                    </App>
You use custom HTML attribes created by you and supported by React to be passed to the component
In this case,the created property user is passed to the component Welcome. Since Welcome is a stateless
functional component,it has access to this value like so:

const Welcome = (props) => <h1>Hello, {props.user}!</h1>

There are Calendar and CurrentDate components in the code editor. When rendering CurrentDate from 
the Calendar component, pass in a property of date assigned to the current date from JavaScript's 
Date object. Then access this prop in the CurrentDate component, showing its value within the p tags. 
Note that for prop values to be evaluated as JavaScript, they must be enclosed in curly brackets, 
for instance date={Date()}.


const CurrentDate = (props) => {
  return (
    <div>
      { /* Change code below this line */ }

      <p>The current date is:{props.date} </p>
      
      { /* Change code above this line */ }
    </div>
  );
};

class Calendar extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (
      <div>
        <h3>What date is it?</h3>
        { /* Change code below this line */ }

        <CurrentDate date={Date()}/>

        { /* Change code above this line */ }
      </div>
    );
  }
};

